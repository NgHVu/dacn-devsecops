#=================================================================#
# Global Settings
#=================================================================#
replicaCount: 1

# (Tuỳ chọn) Nhãn/annotation chung áp dụng cho mọi tài nguyên
labels: {}
annotations: {}
# labels:
#   app.kubernetes.io/part-of: food-ordering
#   app.kubernetes.io/component: products
# annotations:
#   argocd.argoproj.io/sync-wave: "0"

# (Tuỳ chọn) Annotation riêng cho Pod
podAnnotations: {}
# podAnnotations:
#   prometheus.io/scrape: "true"
#   prometheus.io/port: "8080"
#   prometheus.io/path: "/metrics"

#=================================================================#
# Image Settings
#=================================================================#
image:
  # Ví dụ khi lên AWS ECR:
  # 123456789012.dkr.ecr.ap-southeast-1.amazonaws.com/products
  repository: products
  pullPolicy: IfNotPresent
  # CI/CD sẽ cập nhật tag này (sha7/semver). Local giữ "local".
  tag: "local"

# Cần thiết khi dùng private registry (ví dụ: ECR)
imagePullSecrets: []
# - name: my-ecr-secret  # ⚠️ Tạo secret trước khi dùng

#=================================================================#
# Container Settings
#=================================================================#
container:
  # Cổng ứng dụng String Boot lắng nghe bên trong container
  port: 8081

  # (Tuỳ chọn) Biến môi trường & nguồn env (ConfigMap/Secret)
  env: []
  # env:
  #   - name: APP_ENV
  #     value: "dev"
  #   - name: DATABASE_URL
  #     valueFrom:
  #       secretKeyRef:
  #         name: products-secret
  #         key: database_url

  envFrom: []
  # envFrom:
  #   - configMapRef:
  #       name: products-config
  #   - secretRef:
  #       name: products-secret

  # Cấu hình probes chi tiết hơn (có thể tinh chỉnh mà không sửa template)
  probes:
    liveness:
      path: /actuator/health/liveness  # <-- SỬA DÒNG NÀY
      initialDelaySeconds: 15
      periodSeconds: 20
    readiness:
      path: /actuator/health/readiness # <-- SỬA DÒNG NÀY
      initialDelaySeconds: 5
      periodSeconds: 10
      # timeoutSeconds: 2
      # failureThreshold: 3
    # (Tuỳ chọn) Bật nếu app khởi động chậm để tránh false negative
    # startup:
    #   enabled: true
    #   path: /healthz
    #   initialDelaySeconds: 5
    #   periodSeconds: 5
    #   failureThreshold: 30
    #   timeoutSeconds: 2

#=================================================================#
# Service & Networking
#=================================================================#
service:
  type: ClusterIP
  port: 80
  annotations: {}
  # annotations:
  #   service.beta.kubernetes.io/aws-load-balancer-type: "nlb"

# Mặc định tắt Ingress, thường sẽ do frontend/gateway quản lý
ingress:
  enabled: false
  className: ""
  annotations: {}
  hosts: []
  # hosts:
  #   - host: products.local
  #     paths:
  #       - path: /
  #         pathType: Prefix
  tls: []
  # tls:
  #   - secretName: products-tls
  #     hosts:
  #       - products.local

#=================================================================#
# Resource & Autoscaling
#=================================================================#
resources:
  requests:
    cpu: 100m
    memory: 128Mi
  # limits:
  #   cpu: 200m
  #   memory: 256Mi

autoscaling:
  enabled: false
  minReplicas: 1
  maxReplicas: 3
  targetCPUUtilizationPercentage: 80
  # (Bỏ comment để co giãn theo RAM)
  # targetMemoryUtilizationPercentage: 80

  # (Tuỳ chọn) Behavior để làm mượt quá trình scale (anti-thrashing)
  # behavior:
  #   scaleUp:
  #     stabilizationWindowSeconds: 0
  #     policies:
  #       - type: Percent
  #         value: 100
  #         periodSeconds: 60
  #   scaleDown:
  #     stabilizationWindowSeconds: 300
  #     policies:
  #       - type: Percent
  #         value: 100
  #         periodSeconds: 60

#=================================================================#
# Security & RBAC
#=================================================================#
serviceAccount:
  create: true
  name: ""   # nếu để trống, tên sẽ tự sinh theo release

# Bảo mật cấp Pod (khớp Dockerfile non-root UID/GID 10001)
podSecurityContext:
  fsGroup: 10001

# Bảo mật cấp Container: cứng hoá, chạy non-root
securityContext:
  runAsNonRoot: true
  runAsUser: 10001
  runAsGroup: 10001
  readOnlyRootFilesystem: true
  allowPrivilegeEscalation: false
  capabilities:
    drop: ["ALL"]

#=================================================================#
# Scheduling
#=================================================================#
nodeSelector: {}
tolerations: []
affinity: {}
