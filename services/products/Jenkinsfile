pipeline {
    // ============================================================
    // ‚öôÔ∏è Agent & Options
    // ============================================================
    agent any
    options {
        timestamps()                       // Th√™m timestamp v√†o log
        ansiColor('xterm')                 // M√†u s·∫Øc log d·ªÖ ƒë·ªçc
        timeout(time: 30, unit: 'MINUTES') // Ch·∫∑n treo pipeline qu√° l√¢u
        buildDiscarder(logRotator(numToKeepStr: '15')) // Gi·ªØ l·∫°i 15 b·∫£n build g·∫ßn nh·∫•t
    }

    // ============================================================
    // üß∞ Tools (ch·ªâ c·∫ßn JDK17 cho SonarScanner n·∫øu d√πng sau n√†y)
    // ============================================================
    tools {
        jdk 'jdk17'
    }

    // ============================================================
    // üåç Environment
    // ============================================================
    environment {
        // Trivy: fail khi c√≥ HIGH/CRITICAL (ƒë√∫ng tinh th·∫ßn DevSecOps)
        TRIVY_EXIT_CODE = '1'
        TRIVY_SEVERITY  = 'HIGH,CRITICAL'

        // B·∫≠t BuildKit ƒë·ªÉ build Docker nhanh & t·ªëi ∆∞u layer
        DOCKER_BUILDKIT = '1'

        // T√™n image c·ªë ƒë·ªãnh cho service
        IMAGE_NAME = 'products'
        // Tag s·∫Ω ƒë∆∞·ª£c t√≠nh trong stage "Compute Image Tag"
        IMAGE_TAG  = ''
        // ƒê∆∞·ªùng d·∫´n virtualenv
        VENV_DIR   = '.venv'
    }

    stages {
        stage('0. Pre-Clean') {
            steps {
                echo '--> D·ªçn d·∫πp th∆∞ m·ª•c l√†m vi·ªác tr∆∞·ªõc khi ch·∫°y'
                deleteDir()
            }
        }

        stage('1. Checkout SCM') {
            steps {
                echo '--> L·∫•y m√£ ngu·ªìn t·ª´ Git...'
                checkout scm
                sh 'git --no-pager log -1 --pretty=oneline || true'
            }
        }

        stage('1.1 Compute Image Tag') {
            steps {
                script {
                    // L·∫•y short SHA (7 k√Ω t·ª±). Fallback sang BUILD_NUMBER n·∫øu repo kh√¥ng c√≥ git metadata.
                    def shortSha = sh(returnStdout: true, script: "git rev-parse --short=7 HEAD || echo ${env.BUILD_NUMBER}").trim()
                    env.IMAGE_TAG = shortSha
                    echo "--> IMAGE_TAG = ${env.IMAGE_TAG}"
                }
            }
        }

        stage('2. Unit Test') {
            steps {
                // Th√™m dir() ·ªü ƒë√¢y
                dir('services/products') {
                    echo '--> T·∫°o virtualenv v√† ch·∫°y pytest...'
                    sh '''
                        python3 -m venv ${VENV_DIR}
                        . ${VENV_DIR}/bin/activate
                        python -m pip install --upgrade pip
                        pip install -r requirements.txt
                        pytest -q
                    '''
                }
            }
        }

        // ========================================================
        // üîê Security Scans (local-first)
        // ========================================================
        stage('3. SonarQube Analysis') {
            steps {
                echo '[CH·ªú] S·∫Ω c·∫•u h√¨nh sau khi SonarQube s·∫µn s√†ng (k·∫øt n·ªëi scanner + quality gate).'
                // withSonarQubeEnv('SonarQube-Server') {
                //     sh 'sonar-scanner -Dsonar.projectKey=products -Dsonar.sources=app -Dsonar.python.version=3.11'
                // }
            }
        }

        stage('4. Trivy FS Scan (SCA)') {
            steps {
                // Th√™m dir() ·ªü ƒë√¢y
                dir('services/products') {
                    echo '--> Qu√©t th∆∞ vi·ªán trong workspace v·ªõi Trivy (Filesystem)...'
                    sh "trivy fs --no-progress --severity ${TRIVY_SEVERITY} --exit-code ${TRIVY_EXIT_CODE} ."
                }
            }
        }

        // ========================================================
        // üê≥ Build & Scan Container Image
        // ========================================================
        stage('5. Build Docker Image') {
            steps {
                // Th√™m dir() ·ªü ƒë√¢y
                dir('services/products') {
                    script {
                        def full = "${env.IMAGE_NAME}:${env.IMAGE_TAG}"
                        echo "--> Build image: ${full}"
                        sh """
                            docker build \
                              --pull \
                              -t ${full} \
                              .
                        """
                    }
                }
            }
        }

        stage('6. Trivy Image Scan') {
            steps {
                script {
                    def full = "${env.IMAGE_NAME}:${env.IMAGE_TAG}"
                    echo "--> Trivy image scan: ${full}"
                    sh "trivy image --no-progress --severity ${TRIVY_SEVERITY} --exit-code ${TRIVY_EXIT_CODE} ${full}"
                }
            }
        }

        // ========================================================
        // ‚òÅÔ∏è C√°c b∆∞·ªõc ch·ªù k√≠ch ho·∫°t khi c√≥ AWS
        // ========================================================
        stage('[CH·ªú] Push to ECR') {
            when { expression { return false } } // b·∫≠t khi s·∫µn s√†ng
            steps { echo 'S·∫Ω ƒë·∫©y image l√™n AWS ECR (login ECR, tag, push)...' }
        }

        stage('[CH·ªú] Update GitOps Repo') {
            when { expression { return false } } // b·∫≠t khi s·∫µn s√†ng
            steps { echo 'S·∫Ω c·∫≠p nh·∫≠t repo c·∫•u h√¨nh ƒë·ªÉ trigger ArgoCD...' }
        }
    }

    // ============================================================
    // üßπ Cleanup
    // ============================================================
    post {
        always {
            echo '--> D·ªçn d·∫πp workspace & docker images...'
            script {
                def full = "${env.IMAGE_NAME}:${env.IMAGE_TAG}"
                sh """
                    docker rmi ${full} || true
                    docker image prune -f || true
                """
            }
            cleanWs()
        }
    }
}
