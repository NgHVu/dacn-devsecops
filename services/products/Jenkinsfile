pipeline {
    agent any
    options {
        buildDiscarder(logRotator(numToKeepStr: '10'))
        disableConcurrentBuilds()
        timeout(time: 30, unit: 'MINUTES')
        timestamps()
        ansiColor('xterm')
    }

    environment {
        IMAGE_NAME      = 'products'
        TRIVY_EXIT_CODE = '1'
        TRIVY_SEVERITY  = 'HIGH,CRITICAL'
        DOCKER_BUILDKIT = '1'
    }

    stages {
        stage('0. Pre-Clean') {
            steps {
                echo '--> Dọn dẹp thư mục làm việc trước khi chạy'
                deleteDir()
            }
        }

        stage('1. Checkout SCM & Compute Tag') {
            steps {
                echo '--> Lấy mã nguồn từ Git và tính toán Image Tag...'
                checkout scm
                script {
                    env.IMAGE_TAG = sh(
                        script: 'git rev-parse --short=7 HEAD',
                        returnStdout: true
                    ).trim()
                    if (!env.IMAGE_TAG) {
                        env.IMAGE_TAG = "dev-${env.BUILD_NUMBER}"
                    }
                    echo "--> IMAGE_TAG = ${env.IMAGE_TAG}"
                }
            }
        }

        stage('2. Unit Test') {
            agent {
                docker {
                    // Sử dụng image Maven với Java 21 để đồng bộ với dự án
                    image 'maven:3.9-eclipse-temurin-21'
                    args '-u 0:0 --network dacn-ci_ci'
                    reuseNode true
                }
            }
            steps {
                dir('services/products') {
                    echo '--> Chạy Maven test và build...'
                    // Lệnh `verify` sẽ tự động: compile -> test -> package
                    sh 'mvn clean verify'
                }
            }
        }

        // --- STAGE SONARQUBE ĐÃ ĐƯỢC KÍCH HOẠT ---
        stage('3. SonarQube Analysis') {
             agent {
                docker {
                    image 'maven:3.9-eclipse-temurin-21'
                    args '-u 0:0 --network dacn-ci_ci'
                    reuseNode true
                }
            }
            steps {
                dir('services/products') {
                    withSonarQubeEnv('sonarqube-local') {
                        // Dùng `mvn sonar:sonar` là cách làm chuẩn cho dự án Maven
                        sh '''
                           mvn sonar:sonar \
                               -Dsonar.projectKey=products-service \
                               -Dsonar.host.url=http://sonarqube:9000 \
                               -Dsonar.login=$SONAR_AUTH_TOKEN
                               -Dsonar.coverage.jacoco.xmlReportPaths=target/site/jacoco/jacoco.xml
                        '''
                    }
                }
            }
        }

        // --- THÊM STAGE KIỂM TRA QUALITY GATE ---
        stage('3.1 Quality Gate') {
            steps {
                // Đợi kết quả phân tích từ SonarQube
                timeout(time: 5, unit: 'MINUTES') {
                    // Kiểm tra trạng thái của Quality Gate
                    waitForQualityGate abortPipeline: true
                }
            }
        }

        stage('4. Trivy FS Scan (SCA)') {
            steps {
                dir('services/products') {
                    echo '--> Quét file pom.xml với Trivy (Filesystem)...'
                    // Trivy sẽ tự động tìm và quét file pom.xml trong thư mục này
                    sh "trivy fs --no-progress --severity ${TRIVY_SEVERITY} --exit-code ${TRIVY_EXIT_CODE} ."
                }
            }
        }

        stage('5. Build Docker Image') {
            steps {
                dir('services/products') {
                    script {
                        sh "docker build -t ${env.IMAGE_NAME}:${env.IMAGE_TAG} ."
                    }
                }
            }
        }

        stage('6. Trivy Image Scan') {
            steps {
                script {
                    sh "trivy image --no-progress --severity ${TRIVY_SEVERITY} --exit-code ${TRIVY_EXIT_CODE} ${env.IMAGE_NAME}:${env.IMAGE_TAG}"
                }
            }
        }
    }

    post {
        always {
            echo '--> Dọn dẹp workspace & docker images...'
            script {
                if (env.IMAGE_TAG) {
                    sh "docker rmi ${env.IMAGE_NAME}:${env.IMAGE_TAG} || true"
                }
                sh "docker image prune -f || true"
            }
            cleanWs()
        }
    }
}