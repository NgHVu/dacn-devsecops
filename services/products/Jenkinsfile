pipeline {
    agent any
    options {
        buildDiscarder(logRotator(numToKeepStr: '10'))
        disableConcurrentBuilds()
        timeout(time: 30, unit: 'MINUTES')
        timestamps()
        ansiColor('xterm')
    }

    environment {
        IMAGE_NAME      = 'products'
        IMAGE_TAG       = ''
        VENV_DIR        = '.venv'
        TRIVY_EXIT_CODE = '1'
        TRIVY_SEVERITY  = 'HIGH,CRITICAL'
        DOCKER_BUILDKIT = '1'
    }

    stages {
        // SỬA LỖI: Điền đầy đủ nội dung cho stage
        stage('0. Pre-Clean') {
            steps {
                echo '--> Dọn dẹp thư mục làm việc trước khi chạy'
                deleteDir()
            }
        }

        // SỬA LỖI: Điền đầy đủ nội dung cho stage
        stage('1. Checkout SCM') {
            steps {
                echo '--> Lấy mã nguồn từ Git...'
                checkout scm
                sh 'git --no-pager log -1 --pretty=oneline'
            }
        }

        stage('1.1 Compute Image Tag') {
            steps {
                script {
                    env.IMAGE_TAG = sh(
                        script: 'git rev-parse --short=7 HEAD',
                        returnStdout: true
                    ).trim()
                    echo "--> IMAGE_TAG = ${env.IMAGE_TAG}"
                }
            }
        }

        stage('2. Unit Test') {
            agent {
                docker {
                    image 'python:3.12-bookworm'
                    args '-u 0:0' // Chạy với quyền root để tránh lỗi permission
                    reuseNode true // Tái sử dụng workspace từ agent chính
                }
            }
            steps {
                dir('services/products') {
                    echo '--> Tạo virtualenv và chạy pytest...'
                    sh '''
                        python3 -m venv ${VENV_DIR}
                        . ${VENV_DIR}/bin/activate
                        python -m pip install --upgrade pip
                        pip install -r requirements.txt
                        # pytest -q  // Comment lại nếu bạn chưa có file test
                    '''
                }
            }
        }

        // SỬA LỖI: Điền đầy đủ nội dung cho stage
        stage('3. SonarQube Analysis') {
            steps {
                echo "[CHỜ] Giai đoạn này sẽ được cấu hình sau."
            }
        }

        stage('4. Trivy FS Scan (SCA)') {
            steps {
                dir('services/products') {
                    echo '--> Quét thư viện với Trivy (Filesystem)...'
                    sh "trivy fs --no-progress --severity ${TRIVY_SEVERITY} --exit-code ${TRIVY_EXIT_CODE} ."
                }
            }
        }

        stage('5. Build Docker Image') {
            steps {
                dir('services/products') {
                    script {
                        def fullImageName = "${env.IMAGE_NAME}:${env.IMAGE_TAG}"
                        echo "--> Building Docker image: ${fullImageName}"
                        sh "docker build -t ${fullImageName} ."
                    }
                }
            }
        }

        stage('6. Trivy Image Scan') {
            steps {
                script {
                    def fullImageName = "${env.IMAGE_NAME}:${env.IMAGE_TAG}"
                    echo "--> Scanning Docker image: ${fullImageName}"
                    sh "trivy image --no-progress --severity ${TRIVY_SEVERITY} --exit-code ${TRIVY_EXIT_CODE} ${fullImageName}"
                }
            }
        }
    }

    post {
        always {
            echo '--> Dọn dẹp workspace & docker images...'
            script {
                if (env.IMAGE_TAG) {
                    def fullImageName = "${env.IMAGE_NAME}:${env.IMAGE_TAG}"
                    sh "docker rmi ${fullImageName} || true"
                }
                sh "docker image prune -f || true"
            }
            cleanWs()
        }
    }
}