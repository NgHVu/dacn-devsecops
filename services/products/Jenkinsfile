pipeline {
    agent any
    options {
        buildDiscarder(logRotator(numToKeepStr: '10'))
        disableConcurrentBuilds()
        timeout(time: 30, unit: 'MINUTES')
        timestamps()
        ansiColor('xterm')
    }

    environment {
        IMAGE_NAME      = 'products'
        TRIVY_EXIT_CODE = '1'
        TRIVY_SEVERITY  = 'HIGH,CRITICAL'
        DOCKER_BUILDKIT = '1'
    }

    stages {
        stage('0. Pre-Clean') {
            steps {
                echo '--> Dọn dẹp thư mục làm việc trước khi chạy'
                deleteDir()
            }
        }

        stage('1. Checkout SCM & Compute Tag') {
            steps {
                echo '--> Lấy mã nguồn từ Git và tính toán Image Tag...'
                checkout scm
                script {
                    env.IMAGE_TAG = sh(
                        script: 'git rev-parse --short=7 HEAD',
                        returnStdout: true
                    ).trim()
                    if (!env.IMAGE_TAG) {
                        env.IMAGE_TAG = "dev-${env.BUILD_NUMBER}"
                    }
                    echo "--> IMAGE_TAG = ${env.IMAGE_TAG}"
                }
            }
        }

        // ================================================================= #
        // SỬA LỖI: Tách biệt Test và Sonar, thêm bước kiểm tra
        // ================================================================= #
        stage('2. Test & Analyze') {
            agent {
                docker {
                    image 'maven:3.9-eclipse-temurin-21'
                    args '-u 0:0 --network dacn-ci_ci'
                    reuseNode true
                }
            }
            steps {
                dir('services/products') {
                    // Bước 1: Chạy test và tạo báo cáo JaCoCo
                    echo '--> [1/3] Running tests and generating coverage report...'
                    sh 'mvn clean verify'

                    // Bước 2: KIỂM TRA xem báo cáo có được tạo ra không
                    echo '--> [2/3] Verifying coverage report existence...'
                    sh 'ls -l target/site/jacoco/jacoco.xml'

                    // Bước 3: Gửi báo cáo đã được xác minh đến SonarQube
                    echo '--> [3/3] Sending report to SonarQube...'
                    withSonarQubeEnv('sonarqube-local') {
                        sh '''
                           mvn sonar:sonar \
                               -Dsonar.projectKey=products-service \
                               -Dsonar.host.url=http://sonarqube:9000 \
                               -Dsonar.login=$SONAR_AUTH_TOKEN
                        '''
                    }
                }
            }
        }

        stage('3. Quality Gate') {
            steps {
                timeout(time: 5, unit: 'MINUTES') {
                    waitForQualityGate abortPipeline: true
                }
            }
        }

        // ... Các stages còn lại giữ nguyên ...
        stage('4. Trivy FS Scan (SCA)') {
            steps {
                dir('services/products') {
                    echo '--> Quét thư viện với Trivy (Filesystem)...'
                    sh "trivy fs --no-progress --severity ${TRIVY_SEVERITY} --exit-code ${TRIVY_EXIT_CODE} ."
                }
            }
        }

        stage('5. Build Docker Image') {
            steps {
                dir('services/products') {
                    script {
                        sh "docker build -t ${env.IMAGE_NAME}:${env.IMAGE_TAG} ."
                    }
                }
            }
        }

        stage('6. Trivy Image Scan') {
            steps {
                script {
                    sh "trivy image --no-progress --severity ${TRIVY_SEVERITY} --exit-code ${TRIVY_EXIT_CODE} ${env.IMAGE_NAME}:${env.IMAGE_TAG}"
                }
            }
        }
    }

    post {
        always {
            echo '--> Dọn dẹp workspace & docker images...'
            script {
                if (env.IMAGE_TAG) {
                    sh "docker rmi ${env.IMAGE_NAME}:${env.IMAGE_TAG} || true"
                }
                sh "docker image prune -f || true"
            }
            cleanWs()
        }
    }
}
