pipeline {
    agent any
    options {
        buildDiscarder(logRotator(numToKeepStr: '10'))
        disableConcurrentBuilds()
        timeout(time: 30, unit: 'MINUTES')
        timestamps()
        ansiColor('xterm')
    }

    environment {
        IMAGE_NAME      = 'products'
        TRIVY_EXIT_CODE = '1'
        TRIVY_SEVERITY  = 'HIGH,CRITICAL'
        DOCKER_BUILDKIT = '1'
        // TỐI ƯU: Định nghĩa thư mục cache chung cho Trivy
        TRIVY_CACHE_DIR = "/var/jenkins_home/caches/trivy"
    }

    stages {
        stage('1. Checkout SCM & Compute Tag') {
            steps {
                echo '--> Lấy mã nguồn từ Git và tính toán Image Tag...'
                sh 'git clean -fdx'
                checkout scm
                script {
                    env.IMAGE_TAG = sh(
                        script: 'git rev-parse --short=7 HEAD',
                        returnStdout: true
                    ).trim()
                    if (!env.IMAGE_TAG) {
                        env.IMAGE_TAG = "dev-${env.BUILD_NUMBER}"
                    }
                    echo "--> IMAGE_TAG = ${env.IMAGE_TAG}"
                }
            }
        }

        stage('2. Test & Analyze') {
            agent {
                docker {
                    image 'maven:3.9-eclipse-temurin-21'
                    args '-v $HOME/.m2:/root/.m2 -u 0:0 --network dacn-ci_ci'
                    reuseNode true
                }
            }
            steps {
                dir('services/products') {
                    withSonarQubeEnv('sonarqube-local') {
                        sh '''
                           mvn clean verify sonar:sonar \
                               -Dsonar.projectKey=products-service \
                               -Dsonar.host.url=http://sonarqube:9000 \
                               -Dsonar.login=$SONAR_AUTH_TOKEN
                        '''
                    }
                }
            }
        }
        
        stage('3. Quality Gate') {
            steps {
                timeout(time: 5, unit: 'MINUTES') {
                    waitForQualityGate abortPipeline: true
                }
            }
        }

        // ================================================================= #
        // TỐI ƯU: Sử dụng cache chung cho Trivy
        // ================================================================= #
        stage('4. Trivy FS Scan (SCA)') {
            steps {
                dir('services/products') {
                    echo '--> Quét thư viện với Trivy (Filesystem)...'
                    sh "trivy fs --cache-dir ${TRIVY_CACHE_DIR} --ignore-unfixed --no-progress --severity ${TRIVY_SEVERITY} --exit-code ${TRIVY_EXIT_CODE} ."
                }
            }
        }

        stage('5. Build Docker Image') {
            steps {
                dir('services/products') {
                    echo '--> Building Docker image (đã tối ưu với Layer Caching)...'
                    script {
                        sh "docker build -t ${env.IMAGE_NAME}:${env.IMAGE_TAG} ."
                    }
                }
            }
        }

        // ================================================================= #
        // TỐI ƯU: Tái sử dụng cache chung cho Trivy
        // ================================================================= #
        stage('6. Trivy Image Scan') {
            steps {
                script {
                    sh "trivy image --cache-dir ${TRIVY_CACHE_DIR} --ignore-unfixed --no-progress --severity ${TRIVY_SEVERITY} --exit-code ${TRIVY_EXIT_CODE} ${env.IMAGE_NAME}:${env.IMAGE_TAG}"
                }
            }
        }
    }

    post {
        always {
            echo '--> Dọn dẹp docker images...'
            script {
                if (env.IMAGE_TAG) {
                    sh "docker rmi ${env.IMAGE_NAME}:${env.IMAGE_TAG} || true"
                }
                sh "docker image prune -f || true"
            }
        }
    }
}
