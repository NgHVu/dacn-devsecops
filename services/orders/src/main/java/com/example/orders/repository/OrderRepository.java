package com.example.orders.repository;

import com.example.orders.entity.Order;
import com.example.orders.entity.OrderStatus; 
import org.springframework.data.domain.Page; 
import org.springframework.data.domain.Pageable; 
import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.stereotype.Repository;

import java.util.List;
import java.util.Optional; 

/**
 * Repository interface ƒë·ªÉ t∆∞∆°ng t√°c v·ªõi b·∫£ng 'orders' trong c∆° s·ªü d·ªØ li·ªáu. üíæ
 * K·∫ø th·ª´a JpaRepository ƒë·ªÉ c√≥ s·∫µn c√°c ph∆∞∆°ng th·ª©c CRUD c∆° b·∫£n.
 */
@Repository 
public interface OrderRepository extends JpaRepository<Order, Long> {

    /**
     * T√¨m ki·∫øm t·∫•t c·∫£ ƒë∆°n h√†ng theo ID c·ªßa ng∆∞·ªùi d√πng.
     * C√¢n nh·∫Øc th√™m Pageable ƒë·ªÉ ph√¢n trang n·∫øu danh s√°ch c√≥ th·ªÉ r·∫•t l·ªõn.
     * @param userId ID c·ªßa ng∆∞·ªùi d√πng.
     * @return Danh s√°ch c√°c ƒë∆°n h√†ng c·ªßa ng∆∞·ªùi d√πng ƒë√≥ (c√≥ th·ªÉ c·∫ßn s·∫Øp x·∫øp theo ng√†y t·∫°o).
     * @see #findByUserId(Long, Pageable)
     */
    List<Order> findByUserId(Long userId);

    /**
     * T√¨m ki·∫øm ƒë∆°n h√†ng theo ID c·ªßa ng∆∞·ªùi d√πng, c√≥ h·ªó tr·ª£ ph√¢n trang v√† s·∫Øp x·∫øp.
     * @param userId ID c·ªßa ng∆∞·ªùi d√πng.
     * @param pageable ƒê·ªëi t∆∞·ª£ng ch·ª©a th√¥ng tin ph√¢n trang v√† s·∫Øp x·∫øp (v√≠ d·ª•: s·∫Øp x·∫øp theo createdAt gi·∫£m d·∫ßn).
     * @return M·ªôt trang (Page) ch·ª©a danh s√°ch ƒë∆°n h√†ng c·ªßa ng∆∞·ªùi d√πng.
     */
    Page<Order> findByUserId(Long userId, Pageable pageable); // G·ª£i √Ω: Th√™m ph∆∞∆°ng th·ª©c h·ªó tr·ª£ ph√¢n trang

    /**
     * T√¨m ki·∫øm ƒë∆°n h√†ng theo ID c·ªßa ng∆∞·ªùi d√πng v√† tr·∫°ng th√°i ƒë∆°n h√†ng.
     * @param userId ID c·ªßa ng∆∞·ªùi d√πng.
     * @param status Tr·∫°ng th√°i ƒë∆°n h√†ng c·∫ßn t√¨m.
     * @return Danh s√°ch c√°c ƒë∆°n h√†ng c·ªßa ng∆∞·ªùi d√πng v·ªõi tr·∫°ng th√°i t∆∞∆°ng ·ª©ng.
     */
    List<Order> findByUserIdAndStatus(Long userId, OrderStatus status);

    /**
     * T√¨m ki·∫øm ƒë∆°n h√†ng theo ID v√† ID c·ªßa ng∆∞·ªùi d√πng.
     * R·∫•t quan tr·ªçng ƒë·ªÉ ƒë·∫£m b·∫£o ng∆∞·ªùi d√πng ch·ªâ truy c·∫≠p ƒë∆°n h√†ng c·ªßa ch√≠nh m√¨nh.
     * @param id ID c·ªßa ƒë∆°n h√†ng.
     * @param userId ID c·ªßa ng∆∞·ªùi d√πng s·ªü h·ªØu ƒë∆°n h√†ng.
     * @return Optional ch·ª©a ƒë∆°n h√†ng n·∫øu t√¨m th·∫•y v√† kh·ªõp userId, ng∆∞·ª£c l·∫°i l√† Optional r·ªóng.
     */
    Optional<Order> findByIdAndUserId(Long id, Long userId);

}
